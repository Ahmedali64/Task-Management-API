generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ----------------------------- ENUMS --------------------------------

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  IN_REVIEW
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

// ----------------------------- Relation explanation --------------------------------

// 1- User -> many projects
// 2- Project -> one owner User
// 3- project -> many users
// 4- join table for projects and members
// 5- project -> can has many members
// 6- user -> can be assignee to more than on project
// 7- user -> maybe in more than project that is why we have projectmember[]
// 8- project -> many users that is why we have members[]
// 9- project -> can has more than one task[]
// 10-task -> has one project same task can not be for mult project 
// 11-user -> can has more than one task[]
// 12-user -> can make more than one task[]
// 13-user -> can make multi comments[]
// 14-user -> can has multi attachment[]
// 16-project -> can has multi attachment[]
// 17-task -> can has more than one comment[]
// 18-task -> can has more than one attachment[]
// 19-task -> can has one user who made it 
// 20-task -> can has one optional assigned user
// 21-user -> can has more than one refreshToken

// ----------------------------- Tables --------------------------------

// Users table - authentication & profiles
model User {
  id          String   @id @default(uuid())
  email       String   @unique
  username    String   @unique
  firstName   String
  lastName    String
  password    String
  avatar      String?
  bio         String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  ownedProjects    Project[]       @relation("ProjectOwner")
  projectMembers   ProjectMember[]
  assignedTasks    Task[]          @relation("TaskAssignee")
  createdTasks     Task[]          @relation("TaskCreator")
  comments         Comment[]
  attachments      Attachment[]
  refreshTokens    RefreshToken[] 
  
  @@index([isActive])
  @@map("users")
}

// Projects table - workspaces/boards
model Project {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  color       String?
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  ownerId     String

  // Relationships
  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  tasks       Task[]
  attachments Attachment[]

  @@map("projects")
}

// join table to support many to many relation between (User - Projects)
model ProjectMember {
  id       String      @id @default(uuid())
  role     ProjectRole @default(MEMBER)
  joinedAt DateTime    @default(now())

  // Foreign keys
  userId    String
  projectId String

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Ensure one user can only have one role per project
  @@unique([userId, projectId])
  @@map("project_members")
}

// Tasks table - core functionality
model Task {
  id          String       @id @default(uuid())
  title       String
  description String?      @db.Text
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Foreign keys
  projectId   String
  assigneeId  String?
  createdById String

  // Relationships
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?        @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  createdBy   User         @relation("TaskCreator", fields: [createdById], references: [id])
  comments    Comment[]
  attachments Attachment[]
  
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@map("tasks")
}

// Comments table - collaboration
model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  taskId String
  userId String

  // Relationships
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Attachments table - file management
model Attachment {
  id        String   @id @default(uuid())
  fileName  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  createdAt DateTime @default(now())

  // Foreign keys (attachment can belong to either project or task)
  projectId String?
  taskId    String?
  userId    String

  // Relationships
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

// RefreshToken - for multi device login
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("refresh_tokens")
}